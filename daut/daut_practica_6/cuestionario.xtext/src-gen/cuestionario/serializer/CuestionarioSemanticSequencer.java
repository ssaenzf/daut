/*
 * generated by Xtext 2.26.0
 */
package cuestionario.serializer;

import com.google.inject.Inject;
import cuestionario.Categoria;
import cuestionario.Cuestionario;
import cuestionario.CuestionarioPackage;
import cuestionario.PreguntaMultiple;
import cuestionario.PreguntaUnica;
import cuestionario.Respuesta;
import cuestionario.services.CuestionarioGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CuestionarioSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CuestionarioGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CuestionarioPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CuestionarioPackage.CATEGORIA:
				sequence_Categoria(context, (Categoria) semanticObject); 
				return; 
			case CuestionarioPackage.CUESTIONARIO:
				sequence_Cuestionario(context, (Cuestionario) semanticObject); 
				return; 
			case CuestionarioPackage.PREGUNTA_MULTIPLE:
				sequence_PreguntaMultiple(context, (PreguntaMultiple) semanticObject); 
				return; 
			case CuestionarioPackage.PREGUNTA_UNICA:
				sequence_PreguntaUnica(context, (PreguntaUnica) semanticObject); 
				return; 
			case CuestionarioPackage.RESPUESTA:
				sequence_Respuesta(context, (Respuesta) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Categoria returns Categoria
	 *
	 * Constraint:
	 *     (name=EString dificultad=EDouble (subcategorias+=Categoria subcategorias+=Categoria*)?)
	 * </pre>
	 */
	protected void sequence_Categoria(ISerializationContext context, Categoria semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cuestionario returns Cuestionario
	 *
	 * Constraint:
	 *     (
	 *         preguntaInicial=[Pregunta|EString] 
	 *         preguntasFinales+=[Pregunta|EString] 
	 *         preguntasFinales+=[Pregunta|EString]* 
	 *         preguntas+=Pregunta 
	 *         preguntas+=Pregunta* 
	 *         categorias+=Categoria 
	 *         categorias+=Categoria*
	 *     )
	 * </pre>
	 */
	protected void sequence_Cuestionario(ISerializationContext context, Cuestionario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pregunta returns PreguntaMultiple
	 *     PreguntaMultiple returns PreguntaMultiple
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         enunciado=EString 
	 *         puntuacion=EDouble 
	 *         penalizacion=EDouble 
	 *         categoria=[Categoria|EString] 
	 *         siguientePregunta=[Pregunta|EString]? 
	 *         correctas+=[Respuesta|EString] 
	 *         correctas+=[Respuesta|EString]* 
	 *         respuestas+=Respuesta 
	 *         respuestas+=Respuesta*
	 *     )
	 * </pre>
	 */
	protected void sequence_PreguntaMultiple(ISerializationContext context, PreguntaMultiple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pregunta returns PreguntaUnica
	 *     PreguntaUnica returns PreguntaUnica
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         enunciado=EString 
	 *         puntuacion=EDouble 
	 *         penalizacion=EDouble 
	 *         categoria=[Categoria|EString] 
	 *         siguientePregunta=[Pregunta|EString]? 
	 *         correcta=[Respuesta|EString] 
	 *         respuestas+=Respuesta 
	 *         respuestas+=Respuesta*
	 *     )
	 * </pre>
	 */
	protected void sequence_PreguntaUnica(ISerializationContext context, PreguntaUnica semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Respuesta returns Respuesta
	 *
	 * Constraint:
	 *     (name=EString opcion=EString)
	 * </pre>
	 */
	protected void sequence_Respuesta(ISerializationContext context, Respuesta semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CuestionarioPackage.Literals.RESPUESTA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CuestionarioPackage.Literals.RESPUESTA__NAME));
			if (transientValues.isValueTransient(semanticObject, CuestionarioPackage.Literals.RESPUESTA__OPCION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CuestionarioPackage.Literals.RESPUESTA__OPCION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRespuestaAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRespuestaAccess().getOpcionEStringParserRuleCall_4_0(), semanticObject.getOpcion());
		feeder.finish();
	}
	
	
}
